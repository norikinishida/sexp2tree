
############### Sample for labeled trees with POS tags ####################

S-expression:
	['(', 'S', '(', 'NP', '(', 'DT', 'a', ')', '(', 'NN', 'cat', ')', ')', '(', 'VP', '(', 'VBZ', 'bites', ')', '(', 'NP', '(', 'DT', 'a', ')', '(', 'NN', 'mouse', ')', ')', ')', ')']
Constituent tree (with_nonterminal_labels=True, with_terminal_labels=True):

                    S
         ___________|___________
         |                     |
         |                     VP
         |              _______|________
         |              |              |
         NP             |              NP
    _____|_____         |         _____|_____
    |         |         |         |         |
    DT        NN       VBZ        DT        NN
    |         |         |         |         |
[   a   ] [  cat  ] [ bites ] [   a   ] [ mouse ]

Traversing (pre-order):
	#1
	node.is_terminal() = False
	node.label = S
	str(node) = ( S ( NP ( DT a ) ( NN cat ) ) ( VP ( VBZ bites ) ( NP ( DT a ) ( NN mouse ) ) ) )
	node.tolist() = ['S', ['NP', ['DT', 'a'], ['NN', 'cat']], ['VP', ['VBZ', 'bites'], ['NP', ['DT', 'a'], ['NN', 'mouse']]]]
	node.leaves() = ['a', 'cat', 'bites', 'a', 'mouse']
		#1-1
		str(node.children[0]) = ( NP ( DT a ) ( NN cat ) )
		#1-2
		str(node.children[1]) = ( VP ( VBZ bites ) ( NP ( DT a ) ( NN mouse ) ) )
	#2
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP ( DT a ) ( NN cat ) )
	node.tolist() = ['NP', ['DT', 'a'], ['NN', 'cat']]
	node.leaves() = ['a', 'cat']
		#2-1
		str(node.children[0]) = ( DT a )
		#2-2
		str(node.children[1]) = ( NN cat )
	#3
	node.is_terminal() = True
	node.label = DT
	node.token = a
	node.index = 0
	str(node) = ( DT a )
	node.tolist() = ['DT', 'a']
	node.leaves() = ['a']
	#4
	node.is_terminal() = True
	node.label = NN
	node.token = cat
	node.index = 1
	str(node) = ( NN cat )
	node.tolist() = ['NN', 'cat']
	node.leaves() = ['cat']
	#5
	node.is_terminal() = False
	node.label = VP
	str(node) = ( VP ( VBZ bites ) ( NP ( DT a ) ( NN mouse ) ) )
	node.tolist() = ['VP', ['VBZ', 'bites'], ['NP', ['DT', 'a'], ['NN', 'mouse']]]
	node.leaves() = ['bites', 'a', 'mouse']
		#5-1
		str(node.children[0]) = ( VBZ bites )
		#5-2
		str(node.children[1]) = ( NP ( DT a ) ( NN mouse ) )
	#6
	node.is_terminal() = True
	node.label = VBZ
	node.token = bites
	node.index = 2
	str(node) = ( VBZ bites )
	node.tolist() = ['VBZ', 'bites']
	node.leaves() = ['bites']
	#7
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP ( DT a ) ( NN mouse ) )
	node.tolist() = ['NP', ['DT', 'a'], ['NN', 'mouse']]
	node.leaves() = ['a', 'mouse']
		#7-1
		str(node.children[0]) = ( DT a )
		#7-2
		str(node.children[1]) = ( NN mouse )
	#8
	node.is_terminal() = True
	node.label = DT
	node.token = a
	node.index = 3
	str(node) = ( DT a )
	node.tolist() = ['DT', 'a']
	node.leaves() = ['a']
	#9
	node.is_terminal() = True
	node.label = NN
	node.token = mouse
	node.index = 4
	str(node) = ( NN mouse )
	node.tolist() = ['NN', 'mouse']
	node.leaves() = ['mouse']
Aggregation of production rules (pre-order):
	('S', 'NP', 'VP')
	('NP', 'DT', 'NN')
	('DT', 'a')
	('NN', 'cat')
	('VP', 'VBZ', 'NP')
	('VBZ', 'bites')
	('NP', 'DT', 'NN')
	('DT', 'a')
	('NN', 'mouse')
Aggregation of spans (w/o terminals, pre-order):
	(0, 4, 'S')
	(0, 1, 'NP')
	(2, 4, 'VP')
	(3, 4, 'NP')
Aggregation of spans (w/ terminals, pre-order):
	(0, 4, 'S')
	(0, 1, 'NP')
	(0, 0, 'DT')
	(1, 1, 'NN')
	(2, 4, 'VP')
	(2, 2, 'VBZ')
	(3, 4, 'NP')
	(3, 3, 'DT')
	(4, 4, 'NN')
Aggregation of composition spans (pre-order):
	[(0, 1), (2, 4), 'S']
	[(0, 0), (1, 1), 'NP']
	[(2, 2), (3, 4), 'VP']
	[(3, 3), (4, 4), 'NP']
Aggregation of constituents (pre-order):
	['a', 'cat', 'bites', 'a', 'mouse']
	['a', 'cat']
	['bites', 'a', 'mouse']
	['a', 'mouse']
S-expression (reversed):
	['(', 'S', '(', 'NP', '(', 'DT', 'a', ')', '(', 'NN', 'cat', ')', ')', '(', 'VP', '(', 'VBZ', 'bites', ')', '(', 'NP', '(', 'DT', 'a', ')', '(', 'NN', 'mouse', ')', ')', ')', ')']

############### Sample for labeled trees without POS tags ####################

S-expression:
	['(', 'S', '(', 'NP', 'a', 'cat', ')', '(', 'VP', 'bites', '(', 'NP', 'a', 'mouse', ')', ')', ')']
Constituent tree (with_nonterminal_labels=True, with_terminal_labels=False):

                    S
         ___________|___________
         |                     |
         |                     VP
         |              _______|________
         |              |              |
         NP             |              NP
    _____|_____         |         _____|_____
    |         |         |         |         |
    *         *         *         *         *
    |         |         |         |         |
[   a   ] [  cat  ] [ bites ] [   a   ] [ mouse ]

Traversing (pre-order):
	#1
	node.is_terminal() = False
	node.label = S
	str(node) = ( S ( NP a cat ) ( VP bites ( NP a mouse ) ) )
	node.tolist() = ['S', ['NP', 'a', 'cat'], ['VP', 'bites', ['NP', 'a', 'mouse']]]
	node.leaves() = ['a', 'cat', 'bites', 'a', 'mouse']
		#1-1
		str(node.children[0]) = ( NP a cat )
		#1-2
		str(node.children[1]) = ( VP bites ( NP a mouse ) )
	#2
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP a cat )
	node.tolist() = ['NP', 'a', 'cat']
	node.leaves() = ['a', 'cat']
		#2-1
		str(node.children[0]) = a
		#2-2
		str(node.children[1]) = cat
	#3
	node.is_terminal() = True
	node.token = a
	node.index = 0
	str(node) = a
	node.tolist() = a
	node.leaves() = ['a']
	#4
	node.is_terminal() = True
	node.token = cat
	node.index = 1
	str(node) = cat
	node.tolist() = cat
	node.leaves() = ['cat']
	#5
	node.is_terminal() = False
	node.label = VP
	str(node) = ( VP bites ( NP a mouse ) )
	node.tolist() = ['VP', 'bites', ['NP', 'a', 'mouse']]
	node.leaves() = ['bites', 'a', 'mouse']
		#5-1
		str(node.children[0]) = bites
		#5-2
		str(node.children[1]) = ( NP a mouse )
	#6
	node.is_terminal() = True
	node.token = bites
	node.index = 2
	str(node) = bites
	node.tolist() = bites
	node.leaves() = ['bites']
	#7
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP a mouse )
	node.tolist() = ['NP', 'a', 'mouse']
	node.leaves() = ['a', 'mouse']
		#7-1
		str(node.children[0]) = a
		#7-2
		str(node.children[1]) = mouse
	#8
	node.is_terminal() = True
	node.token = a
	node.index = 3
	str(node) = a
	node.tolist() = a
	node.leaves() = ['a']
	#9
	node.is_terminal() = True
	node.token = mouse
	node.index = 4
	str(node) = mouse
	node.tolist() = mouse
	node.leaves() = ['mouse']
Aggregation of production rules (pre-order):
	('S', 'NP', 'VP')
	('NP', 'a', 'cat')
	('VP', 'bites', 'NP')
	('NP', 'a', 'mouse')
Aggregation of spans (w/o terminals, pre-order):
	(0, 4, 'S')
	(0, 1, 'NP')
	(2, 4, 'VP')
	(3, 4, 'NP')
Aggregation of spans (w/ terminals, pre-order):
	(0, 4, 'S')
	(0, 1, 'NP')
	(0, 0)
	(1, 1)
	(2, 4, 'VP')
	(2, 2)
	(3, 4, 'NP')
	(3, 3)
	(4, 4)
Aggregation of composition spans (pre-order):
	[(0, 1), (2, 4), 'S']
	[(0, 0), (1, 1), 'NP']
	[(2, 2), (3, 4), 'VP']
	[(3, 3), (4, 4), 'NP']
Aggregation of constituents (pre-order):
	['a', 'cat', 'bites', 'a', 'mouse']
	['a', 'cat']
	['bites', 'a', 'mouse']
	['a', 'mouse']
S-expression (reversed):
	['(', 'S', '(', 'NP', 'a', 'cat', ')', '(', 'VP', 'bites', '(', 'NP', 'a', 'mouse', ')', ')', ')']

############### Sample for unlabeled trees with POS tags ####################

S-expression:
	['(', '(', '(', 'DT', 'a', ')', '(', 'NN', 'cat', ')', ')', '(', '(', 'VBZ', 'bites', ')', '(', '(', 'DT', 'a', ')', '(', 'NN', 'mouse', ')', ')', ')', ')']
Constituent tree (with_nonterminal_labels=False, with_terminal_labels=True):

                    *
         ___________|___________
         |                     |
         |                     *
         |              _______|________
         |              |              |
         *              |              *
    _____|_____         |         _____|_____
    |         |         |         |         |
    DT        NN       VBZ        DT        NN
    |         |         |         |         |
[   a   ] [  cat  ] [ bites ] [   a   ] [ mouse ]

Traversing (pre-order):
	#1
	node.is_terminal() = False
	str(node) = ( ( ( DT a ) ( NN cat ) ) ( ( VBZ bites ) ( ( DT a ) ( NN mouse ) ) ) )
	node.tolist() = [[['DT', 'a'], ['NN', 'cat']], [['VBZ', 'bites'], [['DT', 'a'], ['NN', 'mouse']]]]
	node.leaves() = ['a', 'cat', 'bites', 'a', 'mouse']
		#1-1
		str(node.children[0]) = ( ( DT a ) ( NN cat ) )
		#1-2
		str(node.children[1]) = ( ( VBZ bites ) ( ( DT a ) ( NN mouse ) ) )
	#2
	node.is_terminal() = False
	str(node) = ( ( DT a ) ( NN cat ) )
	node.tolist() = [['DT', 'a'], ['NN', 'cat']]
	node.leaves() = ['a', 'cat']
		#2-1
		str(node.children[0]) = ( DT a )
		#2-2
		str(node.children[1]) = ( NN cat )
	#3
	node.is_terminal() = True
	node.label = DT
	node.token = a
	node.index = 0
	str(node) = ( DT a )
	node.tolist() = ['DT', 'a']
	node.leaves() = ['a']
	#4
	node.is_terminal() = True
	node.label = NN
	node.token = cat
	node.index = 1
	str(node) = ( NN cat )
	node.tolist() = ['NN', 'cat']
	node.leaves() = ['cat']
	#5
	node.is_terminal() = False
	str(node) = ( ( VBZ bites ) ( ( DT a ) ( NN mouse ) ) )
	node.tolist() = [['VBZ', 'bites'], [['DT', 'a'], ['NN', 'mouse']]]
	node.leaves() = ['bites', 'a', 'mouse']
		#5-1
		str(node.children[0]) = ( VBZ bites )
		#5-2
		str(node.children[1]) = ( ( DT a ) ( NN mouse ) )
	#6
	node.is_terminal() = True
	node.label = VBZ
	node.token = bites
	node.index = 2
	str(node) = ( VBZ bites )
	node.tolist() = ['VBZ', 'bites']
	node.leaves() = ['bites']
	#7
	node.is_terminal() = False
	str(node) = ( ( DT a ) ( NN mouse ) )
	node.tolist() = [['DT', 'a'], ['NN', 'mouse']]
	node.leaves() = ['a', 'mouse']
		#7-1
		str(node.children[0]) = ( DT a )
		#7-2
		str(node.children[1]) = ( NN mouse )
	#8
	node.is_terminal() = True
	node.label = DT
	node.token = a
	node.index = 3
	str(node) = ( DT a )
	node.tolist() = ['DT', 'a']
	node.leaves() = ['a']
	#9
	node.is_terminal() = True
	node.label = NN
	node.token = mouse
	node.index = 4
	str(node) = ( NN mouse )
	node.tolist() = ['NN', 'mouse']
	node.leaves() = ['mouse']
Aggregation of spans (w/o terminals, pre-order):
	(0, 4)
	(0, 1)
	(2, 4)
	(3, 4)
Aggregation of spans (w/ terminals, pre-order):
	(0, 4)
	(0, 1)
	(0, 0, 'DT')
	(1, 1, 'NN')
	(2, 4)
	(2, 2, 'VBZ')
	(3, 4)
	(3, 3, 'DT')
	(4, 4, 'NN')
Aggregation of composition spans (pre-order):
	[(0, 1), (2, 4)]
	[(0, 0), (1, 1)]
	[(2, 2), (3, 4)]
	[(3, 3), (4, 4)]
Aggregation of constituents (pre-order):
	['a', 'cat', 'bites', 'a', 'mouse']
	['a', 'cat']
	['bites', 'a', 'mouse']
	['a', 'mouse']
S-expression (reversed):
	['(', '(', '(', 'DT', 'a', ')', '(', 'NN', 'cat', ')', ')', '(', '(', 'VBZ', 'bites', ')', '(', '(', 'DT', 'a', ')', '(', 'NN', 'mouse', ')', ')', ')', ')']

############### Sample for unlabeled trees without POS tags ####################

S-expression:
	['(', '(', 'a', 'cat', ')', '(', 'bites', '(', 'a', 'mouse', ')', ')', ')']
Constituent tree (with_nonterminal_labels=False, with_terminal_labels=False):

                    *
         ___________|___________
         |                     |
         |                     *
         |              _______|________
         |              |              |
         *              |              *
    _____|_____         |         _____|_____
    |         |         |         |         |
    *         *         *         *         *
    |         |         |         |         |
[   a   ] [  cat  ] [ bites ] [   a   ] [ mouse ]

Traversing (pre-order):
	#1
	node.is_terminal() = False
	str(node) = ( ( a cat ) ( bites ( a mouse ) ) )
	node.tolist() = [['a', 'cat'], ['bites', ['a', 'mouse']]]
	node.leaves() = ['a', 'cat', 'bites', 'a', 'mouse']
		#1-1
		str(node.children[0]) = ( a cat )
		#1-2
		str(node.children[1]) = ( bites ( a mouse ) )
	#2
	node.is_terminal() = False
	str(node) = ( a cat )
	node.tolist() = ['a', 'cat']
	node.leaves() = ['a', 'cat']
		#2-1
		str(node.children[0]) = a
		#2-2
		str(node.children[1]) = cat
	#3
	node.is_terminal() = True
	node.token = a
	node.index = 0
	str(node) = a
	node.tolist() = a
	node.leaves() = ['a']
	#4
	node.is_terminal() = True
	node.token = cat
	node.index = 1
	str(node) = cat
	node.tolist() = cat
	node.leaves() = ['cat']
	#5
	node.is_terminal() = False
	str(node) = ( bites ( a mouse ) )
	node.tolist() = ['bites', ['a', 'mouse']]
	node.leaves() = ['bites', 'a', 'mouse']
		#5-1
		str(node.children[0]) = bites
		#5-2
		str(node.children[1]) = ( a mouse )
	#6
	node.is_terminal() = True
	node.token = bites
	node.index = 2
	str(node) = bites
	node.tolist() = bites
	node.leaves() = ['bites']
	#7
	node.is_terminal() = False
	str(node) = ( a mouse )
	node.tolist() = ['a', 'mouse']
	node.leaves() = ['a', 'mouse']
		#7-1
		str(node.children[0]) = a
		#7-2
		str(node.children[1]) = mouse
	#8
	node.is_terminal() = True
	node.token = a
	node.index = 3
	str(node) = a
	node.tolist() = a
	node.leaves() = ['a']
	#9
	node.is_terminal() = True
	node.token = mouse
	node.index = 4
	str(node) = mouse
	node.tolist() = mouse
	node.leaves() = ['mouse']
Aggregation of spans (w/o terminals, pre-order):
	(0, 4)
	(0, 1)
	(2, 4)
	(3, 4)
Aggregation of spans (w/ terminals, pre-order):
	(0, 4)
	(0, 1)
	(0, 0)
	(1, 1)
	(2, 4)
	(2, 2)
	(3, 4)
	(3, 3)
	(4, 4)
Aggregation of composition spans (pre-order):
	[(0, 1), (2, 4)]
	[(0, 0), (1, 1)]
	[(2, 2), (3, 4)]
	[(3, 3), (4, 4)]
Aggregation of constituents (pre-order):
	['a', 'cat', 'bites', 'a', 'mouse']
	['a', 'cat']
	['bites', 'a', 'mouse']
	['a', 'mouse']
S-expression (reversed):
	['(', '(', 'a', 'cat', ')', '(', 'bites', '(', 'a', 'mouse', ')', ')', ')']

############### Sample for unary or n-ary trees ####################

S-expression:
	['(', 'NP', '(', 'NP', '(', 'NP', '(', 'N', 'w0', ')', ')', '(', 'NP', '(', 'N', 'w1', ')', ')', ')', '(', 'NP', '(', 'N', 'w2', ')', '(', 'N', 'w3', ')', '(', 'N', 'w4', ')', ')', ')']
Constituent tree (with_nonterminal_labels=True, with_terminal_labels=True):

                        NP
          ______________|______________
          |                           |
          NP                          |
     _____|______                     |
     |          |                     |
     NP         NP                    NP
     |          |          ___________|___________
     |          |          |          |          |
     N          N          N          N          N
     |          |          |          |          |
[   w0   ] [   w1   ] [   w2   ] [   w3   ] [   w4   ]

Traversing (pre-order):
	#1
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP ( NP ( NP ( N w0 ) ) ( NP ( N w1 ) ) ) ( NP ( N w2 ) ( N w3 ) ( N w4 ) ) )
	node.tolist() = ['NP', ['NP', ['NP', ['N', 'w0']], ['NP', ['N', 'w1']]], ['NP', ['N', 'w2'], ['N', 'w3'], ['N', 'w4']]]
	node.leaves() = ['w0', 'w1', 'w2', 'w3', 'w4']
		#1-1
		str(node.children[0]) = ( NP ( NP ( N w0 ) ) ( NP ( N w1 ) ) )
		#1-2
		str(node.children[1]) = ( NP ( N w2 ) ( N w3 ) ( N w4 ) )
	#2
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP ( NP ( N w0 ) ) ( NP ( N w1 ) ) )
	node.tolist() = ['NP', ['NP', ['N', 'w0']], ['NP', ['N', 'w1']]]
	node.leaves() = ['w0', 'w1']
		#2-1
		str(node.children[0]) = ( NP ( N w0 ) )
		#2-2
		str(node.children[1]) = ( NP ( N w1 ) )
	#3
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP ( N w0 ) )
	node.tolist() = ['NP', ['N', 'w0']]
	node.leaves() = ['w0']
		#3-1
		str(node.children[0]) = ( N w0 )
	#4
	node.is_terminal() = True
	node.label = N
	node.token = w0
	node.index = 0
	str(node) = ( N w0 )
	node.tolist() = ['N', 'w0']
	node.leaves() = ['w0']
	#5
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP ( N w1 ) )
	node.tolist() = ['NP', ['N', 'w1']]
	node.leaves() = ['w1']
		#5-1
		str(node.children[0]) = ( N w1 )
	#6
	node.is_terminal() = True
	node.label = N
	node.token = w1
	node.index = 1
	str(node) = ( N w1 )
	node.tolist() = ['N', 'w1']
	node.leaves() = ['w1']
	#7
	node.is_terminal() = False
	node.label = NP
	str(node) = ( NP ( N w2 ) ( N w3 ) ( N w4 ) )
	node.tolist() = ['NP', ['N', 'w2'], ['N', 'w3'], ['N', 'w4']]
	node.leaves() = ['w2', 'w3', 'w4']
		#7-1
		str(node.children[0]) = ( N w2 )
		#7-2
		str(node.children[1]) = ( N w3 )
		#7-3
		str(node.children[2]) = ( N w4 )
	#8
	node.is_terminal() = True
	node.label = N
	node.token = w2
	node.index = 2
	str(node) = ( N w2 )
	node.tolist() = ['N', 'w2']
	node.leaves() = ['w2']
	#9
	node.is_terminal() = True
	node.label = N
	node.token = w3
	node.index = 3
	str(node) = ( N w3 )
	node.tolist() = ['N', 'w3']
	node.leaves() = ['w3']
	#10
	node.is_terminal() = True
	node.label = N
	node.token = w4
	node.index = 4
	str(node) = ( N w4 )
	node.tolist() = ['N', 'w4']
	node.leaves() = ['w4']
Aggregation of production rules (pre-order):
	('NP', 'NP', 'NP')
	('NP', 'NP', 'NP')
	('NP', 'N')
	('N', 'w0')
	('NP', 'N')
	('N', 'w1')
	('NP', 'N', 'N', 'N')
	('N', 'w2')
	('N', 'w3')
	('N', 'w4')
Aggregation of spans (w/o terminals, pre-order):
	(0, 4, 'NP')
	(0, 1, 'NP')
	(0, 0, 'NP')
	(1, 1, 'NP')
	(2, 4, 'NP')
Aggregation of spans (w/ terminals, pre-order):
	(0, 4, 'NP')
	(0, 1, 'NP')
	(0, 0, 'NP')
	(0, 0, 'N')
	(1, 1, 'NP')
	(1, 1, 'N')
	(2, 4, 'NP')
	(2, 2, 'N')
	(3, 3, 'N')
	(4, 4, 'N')
Aggregation of composition spans (pre-order):
	[(0, 1), (2, 4), 'NP']
	[(0, 0), (1, 1), 'NP']
	[(0, 0), 'NP']
	[(1, 1), 'NP']
	[(2, 2), (3, 3), (4, 4), 'NP']
Aggregation of constituents (pre-order):
	['w0', 'w1', 'w2', 'w3', 'w4']
	['w0', 'w1']
	['w0']
	['w1']
	['w2', 'w3', 'w4']
S-expression (reversed):
	['(', 'NP', '(', 'NP', '(', 'NP', '(', 'N', 'w0', ')', ')', '(', 'NP', '(', 'N', 'w1', ')', ')', ')', '(', 'NP', '(', 'N', 'w2', ')', '(', 'N', 'w3', ')', '(', 'N', 'w4', ')', ')', ')']

############### Sample for dependency trees ####################

tokens = ['<root>', 'a', 'boy', 'saw', 'a', 'girl', 'with', 'a', 'telescope']
arcs = [(2, 1, 'det'), (3, 2, 'nsubj'), (3, 5, 'dobj'), (5, 4, 'det'), (3, 6, 'prep'), (6, 8, 'pobj'), (8, 7, 'det'), (0, 3, '<root>')]

                                     _______________________________
                                     |                         prep|
       _____________________________ |___________________          | ____________________
       |                     <root>| |              dobj|          | |              pobj|
       |       _________ _________ | |       __________ |          | |       __________ |
       |       |det    | |nsubj  | | |       |det     | |          | |       |det     | |
       |       V       | V       | V |       V        | V          V |       V        | V
[ <root> ] [   a   ] [  boy  ] [  saw  ] [   a   ] [  girl  ] [  with  ] [   a   ] [telescope]

str(dtree) = 2-1-det 3-2-nsubj 0-3-<root> 5-4-det 3-5-dobj 3-6-prep 8-7-det 6-8-pobj
dtree.tolist(labeled=True) = [(2, 1, 'det'), (3, 2, 'nsubj'), (0, 3, '<root>'), (5, 4, 'det'), (3, 5, 'dobj'), (3, 6, 'prep'), (8, 7, 'det'), (6, 8, 'pobj')]
dtree.tolist(labeled=False) = [(2, 1), (3, 2), (0, 3), (5, 4), (3, 5), (3, 6), (8, 7), (6, 8)]
dtree.head2dependents=defaultdict(<class 'list'>, {2: [(1, 'det')], 3: [(2, 'nsubj'), (5, 'dobj'), (6, 'prep')], 0: [(3, '<root>')], 5: [(4, 'det')], 8: [(7, 'det')], 6: [(8, 'pobj')]})
dtree.dependent2head={0: (None, None), 1: (2, 'det'), 2: (3, 'nsubj'), 3: (0, '<root>'), 4: (5, 'det'), 5: (3, 'dobj'), 6: (3, 'prep'), 7: (8, 'det'), 8: (6, 'pobj')}
	Token 0
	dtree.get_head(0) = (None, None)
	dtree.get_dependents(0) = [(3, '<root>')]
	Token 1
	dtree.get_head(1) = (2, 'det')
	dtree.get_dependents(1) = []
	Token 2
	dtree.get_head(2) = (3, 'nsubj')
	dtree.get_dependents(2) = [(1, 'det')]
	Token 3
	dtree.get_head(3) = (0, '<root>')
	dtree.get_dependents(3) = [(2, 'nsubj'), (5, 'dobj'), (6, 'prep')]
	Token 4
	dtree.get_head(4) = (5, 'det')
	dtree.get_dependents(4) = []
	Token 5
	dtree.get_head(5) = (3, 'dobj')
	dtree.get_dependents(5) = [(4, 'det')]
	Token 6
	dtree.get_head(6) = (3, 'prep')
	dtree.get_dependents(6) = [(8, 'pobj')]
	Token 7
	dtree.get_head(7) = (8, 'det')
	dtree.get_dependents(7) = []
	Token 8
	dtree.get_head(8) = (6, 'pobj')
	dtree.get_dependents(8) = [(7, 'det')]

############### Sample for conversion from constituency tree to dependency tree ####################

                            S
         ___________________|___________________
         |                                     |
         |                                     VP
         |                     ________________|________________
         |                     |                               |
         |                     VP                              PP
         |              _______|________                _______|________
         |              |              |                |              |
         NP             |              NP               |              NP
    _____|_____         |         _____|______          |         _____|______
    |         |         |         |          |          |         |          |
    DT        NN       VBD        DT         NN         IN        DT         NN
    |         |         |         |          |          |         |          |
[   a   ] [  boy  ] [  saw  ] [   a   ] [  girl  ] [  with  ] [   a   ] [telescope]

Heads (post-order):
	#1
	str(node) = ( DT a )
	node.head_child_index = 0
	node.head_token_index = 0
	#2
	str(node) = ( NN boy )
	node.head_child_index = 1
	node.head_token_index = 1
	#3
	str(node) = ( NP ( DT a ) ( NN boy ) )
	node.head_child_index = 1
	node.head_token_index = 1
	#4
	str(node) = ( VBD saw )
	node.head_child_index = 2
	node.head_token_index = 2
	#5
	str(node) = ( DT a )
	node.head_child_index = 3
	node.head_token_index = 3
	#6
	str(node) = ( NN girl )
	node.head_child_index = 4
	node.head_token_index = 4
	#7
	str(node) = ( NP ( DT a ) ( NN girl ) )
	node.head_child_index = 1
	node.head_token_index = 4
	#8
	str(node) = ( VP ( VBD saw ) ( NP ( DT a ) ( NN girl ) ) )
	node.head_child_index = 0
	node.head_token_index = 2
	#9
	str(node) = ( IN with )
	node.head_child_index = 5
	node.head_token_index = 5
	#10
	str(node) = ( DT a )
	node.head_child_index = 6
	node.head_token_index = 6
	#11
	str(node) = ( NN telescope )
	node.head_child_index = 7
	node.head_token_index = 7
	#12
	str(node) = ( NP ( DT a ) ( NN telescope ) )
	node.head_child_index = 1
	node.head_token_index = 7
	#13
	str(node) = ( PP ( IN with ) ( NP ( DT a ) ( NN telescope ) ) )
	node.head_child_index = 0
	node.head_token_index = 5
	#14
	str(node) = ( VP ( VP ( VBD saw ) ( NP ( DT a ) ( NN girl ) ) ) ( PP ( IN with ) ( NP ( DT a ) ( NN telescope ) ) ) )
	node.head_child_index = 0
	node.head_token_index = 2
	#15
	str(node) = ( S ( NP ( DT a ) ( NN boy ) ) ( VP ( VP ( VBD saw ) ( NP ( DT a ) ( NN girl ) ) ) ( PP ( IN with ) ( NP ( DT a ) ( NN telescope ) ) ) ) )
	node.head_child_index = 1
	node.head_token_index = 2
                                     _______________________________
                                     |                           VP|
       _____________________________ |___________________          | ____________________
       |                     <root>| |                VP|          | |                PP|
       |       _________ _________ | |       __________ |          | |       __________ |
       |       |NP     | |S      | | |       |NP      | |          | |       |NP      | |
       |       V       | V       | V |       V        | V          V |       V        | V
[ <root> ] [   a   ] [  boy  ] [  saw  ] [   a   ] [  girl  ] [  with  ] [   a   ] [telescope]

############### Sample for conversion from dependency tree to constituency tree ####################

                                     _______________________________
                                     |                         prep|
       _____________________________ |___________________          | ____________________
       |                     <root>| |              dobj|          | |              pobj|
       |       _________ _________ | |       __________ |          | |       __________ |
       |       |det    | |nsubj  | | |       |det     | |          | |       |det     | |
       |       V       | V       | V |       V        | V          V |       V        | V
[ <root> ] [   a   ] [  boy  ] [  saw  ] [   a   ] [  girl  ] [  with  ] [   a   ] [telescope]

                             nsubj/dobj/prep
         ___________________________|___________________________
         |              |              |                       |
         |              |              |                      pobj
         |              |              |                _______|________
         |              |              |                |              |
        det             |             det               |             det
    _____|_____         |         _____|______          |         _____|______
    |         |         |         |          |          |         |          |
    *         *         *         *          *          *         *          *
    |         |         |         |          |          |         |          |
[   a   ] [  boy  ] [  saw  ] [   a   ] [  girl  ] [  with  ] [   a   ] [telescope]

############### Sample for RST-DT constituency tree ####################

( <TextualOrganization,N/N> ( <elaboration-additional,N/S> ( <elaboration-additional,N/S> ( <elaboration-additional,N/S> ( <Same-Unit,N/N> ( <elaboration-object-attribute-e,N/S> 0 1 ) 2 ) ( <List,N/N> 3 4 ) ) ( <Same-Unit,N/N> ( <elaboration-object-attribute-e,N/S> 5 6 ) 7 ) ) ( <Otherwise,N/N> ( <elaboration-object-attribute-e,N/S> 8 9 ) 10 ) ) ( <elaboration-general-specific,N/S> 11 12 ) )
                                                                                    <TEXTUAL-ORGANIZATION,N/N>
                                                                       _________________________|_________________________
                                                                       |                                                 |
                                                               <ELABORATION,N/S>                                         |
                                              _________________________|__________________________                       |
                                              |                                                  |                       |
                                      <ELABORATION,N/S>                                          |                       |
                           ___________________|____________________                              |                       |
                           |                                      |                              |                       |
                   <ELABORATION,N/S>                              |                              |                       |
                ___________|____________                          |                              |                       |
                |                      |                          |                              |                       |
         <SAME-UNIT,N/N>               |                   <SAME-UNIT,N/N>                <CONDITION,N/N>                |
         _______|________              |                   _______|________              ________|________               |
         |              |              |                   |              |              |               |               |
 <ELABORATION,N/S>      |         <JOINT,N/N>      <ELABORATION,N/S>      |      <ELABORATION,N/S>       |       <ELABORATION,N/S>
    _____|_____         |         _____|_____         _____|_____         |         _____|_____          |          _____|______
    |         |         |         |         |         |         |         |         |         |          |          |          |
    *         *         *         *         *         *         *         *         *         *          *          *          *
    |         |         |         |         |         |         |         |         |         |          |          |          |
[   0   ] [   1   ] [   2   ] [   3   ] [   4   ] [   5   ] [   6   ] [   7   ] [   8   ] [   9   ] [   10   ] [   11   ] [   12   ]
TEXTUAL-ORGANIZATION N/N
ELABORATION N/S
ELABORATION N/S
ELABORATION N/S
SAME-UNIT N/N
ELABORATION N/S
JOINT N/N
SAME-UNIT N/N
ELABORATION N/S
CONDITION N/N
ELABORATION N/S
ELABORATION N/S
                                                                                            <ORG,N/N>
                                                                       _________________________|_________________________
                                                                       |                                                 |
                                                                   <ELB,N/S>                                             |
                                              _________________________|__________________________                       |
                                              |                                                  |                       |
                                          <ELB,N/S>                                              |                       |
                           ___________________|____________________                              |                       |
                           |                                      |                              |                       |
                       <ELB,N/S>                                  |                              |                       |
                ___________|____________                          |                              |                       |
                |                      |                          |                              |                       |
             <SU,N/N>                  |                       <SU,N/N>                      <CND,N/N>                   |
         _______|________              |                   _______|________              ________|________               |
         |              |              |                   |              |              |               |               |
     <ELB,N/S>          |          <JNT,N/N>           <ELB,N/S>          |          <ELB,N/S>           |           <ELB,N/S>
    _____|_____         |         _____|_____         _____|_____         |         _____|_____          |          _____|______
    |         |         |         |         |         |         |         |         |         |          |          |          |
    *         *         *         *         *         *         *         *         *         *          *          *          *
    |         |         |         |         |         |         |         |         |         |          |          |          |
[   0   ] [   1   ] [   2   ] [   3   ] [   4   ] [   5   ] [   6   ] [   7   ] [   8   ] [   9   ] [   10   ] [   11   ] [   12   ]
ORG N/N
ELB N/S
ELB N/S
ELB N/S
SU N/N
ELB N/S
JNT N/N
SU N/N
ELB N/S
CND N/N
ELB N/S
ELB N/S
